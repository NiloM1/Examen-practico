import requests
import json
import datetime
import time
import psutil
import clr

# Configuración de Firebase
FIREBASE_URL = 'https://examen-recuperacion1-default-rtdb.firebaseio.com/'  # URL base de tu Firebase
TEMP_THRESHOLD = 75
RAM_THRESHOLD = 70

clr.AddReference('System.Management')
from System.Management import ManagementObjectSearcher

def get_cpu_temperature():
    try:
        searcher = ManagementObjectSearcher("root\\OpenHardwareMonitor", "SELECT * FROM Sensor WHERE SensorType='Temperature'")
        for obj in searcher.Get():
            if obj['Name'].startswith("CPU Package"):
                return obj['Value']
        return None
    except Exception as e:
        print(f"Error obteniendo la temperatura del CPU: {e}")
        return None

def get_ram_usage():
    ram = psutil.virtual_memory()
    return ram.percent

def format_data(value, value_type):
    timestamp = datetime.datetime.now().strftime('%Y-%m-%d')
    if value_type == 'ram_usage':
        return f"{timestamp} - {value}%"
    elif value_type == 'temperature':
        return f"{timestamp} - {value} °C"
    else:
        return f"{timestamp} - {value}"

def send_to_firebase(data, path):
    try:
        url = f"{FIREBASE_URL}{path}.json"
        response = requests.put(url, data=json.dumps(data))
        response.raise_for_status()
        print(f"Datos enviados a {url}: {data}")
    except requests.exceptions.RequestException as e:
        print(f"Error enviando datos a Firebase: {e}")

def monitor_system():
    while True:
        cpu_temp = get_cpu_temperature()
        ram_usage = get_ram_usage()

        if cpu_temp is not None and cpu_temp > TEMP_THRESHOLD:
            formatted_temp = format_data(cpu_temp, 'temperature')
            data = {'data': formatted_temp}
            send_to_firebase(data, 'temperaturas')

        if ram_usage > RAM_THRESHOLD:
            formatted_ram = format_data(ram_usage, 'ram_usage')
            data = {'data': formatted_ram}
            send_to_firebase(data, 'ram_usage')

        # Pausa de 2 segundos antes de la siguiente lectura
        time.sleep(2)

if __name__ == "__main__":
    monitor_system()
